import streamlit as st
import matplotlib.pyplot as plt

# CSS ƒë·ªÉ t√πy ch·ªânh m√†u s·∫Øc v√† responsive
st.markdown("""
    <style>
    /* T√πy ch·ªânh √¥ nh·∫≠p li·ªáu */
    .stNumberInput > div > input {
        width: 100%;
        padding: 8px;
        border: 2px solid #4CAF50; /* Vi·ªÅn xanh l√° */
        border-radius: 5px;
        background-color: #F5F7F5; /* N·ªÅn x√°m nh·∫°t */
        color: #333; /* Ch·ªØ x√°m ƒë·∫≠m */
        font-size: 16px;
    }
    .stSelectbox > div > select {
        width: 100%;
        padding: 8px;
        border: 2px solid #FF9800; /* Vi·ªÅn cam */
        border-radius: 5px;
        background-color: #FFF3E0; /* N·ªÅn cam nh·∫°t */
        color: #333;
        font-size: 16px;
    }
    /* T√πy ch·ªânh n√∫t b·∫•m */
    .stButton > button {
        width: 100%;
        padding: 10px;
        background-color: #4CAF50; /* N·ªÅn xanh l√° */
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        font-weight: bold;
        transition: background-color 0.3s;
    }
    .stButton > button:hover {
        background-color: #45A049; /* Xanh ƒë·∫≠m h∆°n khi hover */
    }
    /* Responsive */
    @media (max-width: 600px) {
        .stColumn {
            width: 100% !important;
            margin-bottom: 10px;
        }
        .stButton > button {
            width: 100%;
        }
    }
    @media (min-width: 601px) and (max-width: 900px) {
        .stColumn {
            width: 50% !important;
        }
    }
    </style>
""", unsafe_allow_html=True)

# T·ª´ ƒëi·ªÉn d·ªãch ng√¥n ng·ªØ
translations = {
    "vi": {
        "title": "T√≠nh Ch·ªâ S·ªë BMI Theo ƒê·ªô Tu·ªïi",
        "age_label": "Tu·ªïi (0-100):",
        "gender_label": "Gi·ªõi t√≠nh:",
        "male": "Nam",
        "female": "N·ªØ",
        "weight_label": "C√¢n n·∫∑ng (kg):",
        "height_label": "Chi·ªÅu cao (cm):",
        "calculate_button": "T√≠nh BMI",
        "bmi_result": "Ch·ªâ s·ªë BMI c·ªßa b·∫°n l√†: **{bmi:.2f}**",
        "category_label": "Ph√¢n lo·∫°i (tu·ªïi {age}, {gender}): **{category}**",
        "adult_category_label": "Ph√¢n lo·∫°i (18+): **{category}**",
        "advice_label": "L·ªùi khuy√™n ng·ªô nghƒ©nh: {advice}",
        "child_note": "L∆∞u √Ω: K·∫øt qu·∫£ d·ª±a tr√™n bi·ªÉu ƒë·ªì percentile. H√£y h·ªèi b√°c sƒ© ƒë·ªÉ bi·∫øt th√™m nha!",
        "height_error": "Chi·ªÅu cao ph·∫£i l·ªõn h∆°n 0 nha!",
        "chart_title": "Bi·ªÉu ƒë·ªì BMI si√™u x·ªãn",
        "no_data": "√îi, ch∆∞a c√≥ d·ªØ li·ªáu percentile cho tu·ªïi n√†y ƒë√¢u!"
    },
    "en": {
        "title": "Calculate BMI by Age",
        "age_label": "Age (0-100):",
        "gender_label": "Gender:",
        "male": "Male",
        "female": "Female",
        "weight_label": "Weight (kg):",
        "height_label": "Height (cm):",
        "calculate_button": "Calculate BMI",
        "bmi_result": "Your BMI is: **{bmi:.2f}**",
        "category_label": "Classification (age {age}, {gender}): **{category}**",
        "adult_category_label": "Classification (18+): **{category}**",
        "advice_label": "Fun advice: {advice}",
        "child_note": "Note: Results are based on percentile charts. Ask a doctor for more details!",
        "height_error": "Height must be greater than 0, buddy!",
        "chart_title": "Super Cool BMI Chart",
        "no_data": "Oops, no percentile data for this age yet!"
    }
}

# D·ªØ li·ªáu percentile (gi·∫£ l·∫≠p WHO/CDC cho tr·∫ª em 2-17 tu·ªïi)
percentile_data = {
    "male": {
        2: {"P5": 12.5, "P50": 14.5, "P85": 16.5, "P95": 17.5},
        3: {"P5": 12.7, "P50": 14.7, "P85": 16.7, "P95": 17.8},
        4: {"P5": 12.9, "P50": 14.9, "P85": 16.9, "P95": 18.0},
        5: {"P5": 13.0, "P50": 15.0, "P85": 17.0, "P95": 18.5},
        6: {"P5": 13.2, "P50": 15.3, "P85": 17.5, "P95": 19.0},
        7: {"P5": 13.5, "P50": 15.7, "P85": 18.0, "P95": 19.7},
        8: {"P5": 13.8, "P50": 16.2, "P85": 18.7, "P95": 20.5},
        9: {"P5": 14.0, "P50": 16.7, "P85": 19.5, "P95": 21.5},
        10: {"P5": 14.3, "P50": 17.3, "P85": 20.3, "P95": 22.5},
        11: {"P5": 14.7, "P50": 18.0, "P85": 21.2, "P95": 23.5},
        12: {"P5": 15.1, "P50": 18.7, "P85": 22.2, "P95": 24.5},
        13: {"P5": 15.6, "P50": 19.5, "P85": 23.2, "P95": 25.5},
        14: {"P5": 16.2, "P50": 20.3, "P85": 24.2, "P95": 26.5},
        15: {"P5": 16.8, "P50": 21.1, "P85": 25.1, "P95": 27.5},
        16: {"P5": 17.3, "P50": 21.8, "P85": 25.9, "P95": 28.3},
        17: {"P5": 17.8, "P50": 22.4, "P85": 26.5, "P95": 29.0}
    },
    "female": {
        2: {"P5": 12.3, "P50": 14.3, "P85": 16.3, "P95": 17.3},
        3: {"P5": 12.5, "P50": 14.5, "P85": 16.5, "P95": 17.6},
        4: {"P5": 12.7, "P50": 14.7, "P85": 16.8, "P95": 17.9},
        5: {"P5": 12.8, "P50": 14.8, "P85": 17.0, "P95": 18.2},
        6: {"P5": 13.0, "P50": 15.0, "P85": 17.4, "P95": 18.7},
        7: {"P5": 13.3, "P50": 15.4, "P85": 18.0, "P95": 19.4},
        8: {"P5": 13.6, "P50": 15.9, "P85": 18.7, "P95": 20.3},
        9: {"P5": 14.0, "P50": 16.5, "P85": 19.6, "P95": 21.4},
        10: {"P5": 14.4, "P50": 17.2, "P85": 20.6, "P95": 22.6},
        11: {"P5": 14.9, "P50": 18.0, "P85": 21.7, "P95": 23.9},
        12: {"P5": 15.5, "P50": 18.9, "P85": 22.9, "P95": 25.2},
        13: {"P5": 16.1, "P50": 19.8, "P85": 24.0, "P95": 26.4},
        14: {"P5": 16.7, "P50": 20.6, "P85": 24.9, "P95": 27.4},
        15: {"P5": 17.2, "P50": 21.3, "P85": 25.7, "P95": 28.2},
        16: {"P5": 17.6, "P50": 21.9, "P85": 26.3, "P95": 28.9},
        17: {"P5": 17.9, "P50": 22.3, "P85": 26.8, "P95": 29.5}
    }
}

# H√†m t√≠nh BMI
def calculate_bmi(weight, height_m):
    return weight / (height_m * height_m)

# H√†m ph√¢n lo·∫°i BMI cho tr·∫ª em
def classify_bmi_children(bmi, age, gender, lang):
    available_ages = sorted(percentile_data[gender].keys())
    closest_age = min(available_ages, key=lambda x: abs(x - age))
    
    if closest_age not in percentile_data[gender]:
        return "Kh√¥ng c√≥ d·ªØ li·ªáu", translations[lang]["no_data"]
    
    percentiles = percentile_data[gender][closest_age]
    if bmi < percentiles["P5"]:
        return "G·∫ßy (d∆∞·ªõi P5)", "H√£y l√†m b·∫°n v·ªõi rau xanh v√† s·ªØa, ch√∫ng ƒëang ch·ªù ƒë·ªÉ gi√∫p b·∫°n kh·ªèe h∆°n ƒë·∫•y! üò∫"
    elif percentiles["P5"] <= bmi < percentiles["P85"]:
        return "B√¨nh th∆∞·ªùng (P5-P85)", "Tuy·ªát v·ªùi! C·ª© nh·∫£y nh√≥t, ch·∫°y ch∆°i v√† ƒÉn ƒë·ªß ch·∫•t ƒë·ªÉ gi·ªØ d√°ng si√™u x·ªãn nha! üê∂"
    elif percentiles["P85"] <= bmi < percentiles["P95"]:
        return "Th·ª´a c√¢n (P85-P95)", "√îi, b·ªõt ƒÉn b√°nh ng·ªçt t√≠ nha, c√πng ch·∫°y b·ªô v·ªõi ch√∫ c√∫n ƒë·ªÉ d√°ng ƒë·∫πp h∆°n n√†o! üêæ"
    else:
        return "B√©o ph√¨ (tr√™n P95)", "ƒê·ª´ng lo, h√£y l√†m si√™u anh h√πng: ƒÉn rau, t·∫≠p th·ªÉ thao, b√°c sƒ© s·∫Ω gi√∫p b·∫°n chi·∫øn th·∫Øng! üí™"

# H√†m ph√¢n lo·∫°i BMI cho ng∆∞·ªùi l·ªõn
def classify_bmi_adult(bmi, lang):
    if bmi < 18.5:
        return "G·∫ßy", "H√£y m·ªùi c∆° th·ªÉ b·∫°n m·ªôt b·ªØa ti·ªác protein v√† tr√°i c√¢y, n√≥ s·∫Ω c·∫£m ∆°n b·∫°n b·∫±ng nƒÉng l∆∞·ª£ng d·ªìi d√†o! üçé"
    elif 18.5 <= bmi <= 24.9:
        return "B√¨nh th∆∞·ªùng", "B·∫°n l√† ng√¥i sao c√¢n ƒë·ªëi! C·ª© gi·ªØ vibe t√≠ch c·ª±c, gym nh·∫π v√† salad vui v·∫ª nha! üåü"
    elif 25 <= bmi <= 29.9:
        return "Th·ª´a c√¢n", "T√≠ t·∫πo nƒÉng l∆∞·ª£ng d∆∞ th√¥i! ƒêi b·ªô v·ªõi b·∫°n th√¢n, b·ªè b·ªõt snack ƒë√™m khuya, d√°ng s·∫Ω xinh ngay! üö∂"
    else:
        return "B√©o ph√¨", "B·∫Øt ƒë·∫ßu h√†nh tr√¨nh si√™u nh√¢n n√†o: nh·∫£y d√¢y, ƒÉn rau, b√°c sƒ© s·∫Ω l√† ƒë·ªìng ƒë·ªôi gi√∫p b·∫°n t·ªèa s√°ng! ü¶∏"

# H√†m v·∫Ω bi·ªÉu ƒë·ªì (d·∫°ng v√πng)
def plot_bmi_chart(bmi, age, gender, lang):
    fig, ax = plt.subplots(figsize=(8, 4))
    
    if age <= 17:
        available_ages = sorted(percentile_data[gender].keys())
        closest_age = min(available_ages, key=lambda x: abs(x - age))
        percentiles = percentile_data[gender][closest_age]
        categories = ["G·∫ßy (<P5)", "B√¨nh th∆∞·ªùng (P5-P85)", "Th·ª´a c√¢n (P85-P95)", "B√©o ph√¨ (>P95)"]
        thresholds = [0, percentiles["P5"], percentiles["P85"], percentiles["P95"], percentiles["P95"] + 10]
        colors = ['#FF9999', '#66CC99', '#FFCC99', '#FF6666']
        for i in range(len(thresholds)-1):
            ax.fill_betweenx([0, 1], thresholds[i], thresholds[i+1], color=colors[i], alpha=0.5, label=categories[i])
        ax.axvline(x=bmi, color='red', linestyle='--', label=f"BMI: {bmi:.2f}")
        ax.set_xlim(0, thresholds[-1])
        ax.set_ylim(0, 1)
        ax.set_yticks([])
    else:
        categories = ["G·∫ßy", "B√¨nh th∆∞·ªùng", "Th·ª´a c√¢n", "B√©o ph√¨"]
        thresholds = [0, 18.5, 24.9, 29.9, 40]
        colors = ['#FF9999', '#66CC99', '#FFCC99', '#FF6666']
        for i in range(len(thresholds)-1):
            ax.fill_betweenx([0, 1], thresholds[i], thresholds[i+1], color=colors[i], alpha=0.5, label=categories[i])
        ax.axvline(x=bmi, color='red', linestyle='--', label=f"BMI: {bmi:.2f}")
        ax.set_xlim(0, 40)
        ax.set_ylim(0, 1)
        ax.set_yticks([])
    
    ax.set_xlabel("BMI")
    ax.set_title(translations[lang]["chart_title"])
    ax.legend(loc='upper left')
    st.pyplot(fig)

# Giao di·ªán Streamlit
st.title(translations["vi"]["title"])

# Ch·ªçn ng√¥n ng·ªØ
language = st.selectbox("Ng√¥n ng·ªØ / Language:", ["Ti·∫øng Vi·ªát", "English"], index=0)
lang = "vi" if language == "Ti·∫øng Vi·ªát" else "en"

# Khung nh·∫≠p li·ªáu responsive v·ªõi m√†u s·∫Øc
st.subheader("Nh·∫≠p th√¥ng tin c·ªßa b·∫°n")
col1, col2 = st.columns(2)
with col1:
    col_age, col_gender = st.columns(2)
    with col_age:
        age = st.number_input(translations[lang]["age_label"], min_value=0, max_value=100, step=1, key="age")
    with col_gender:
        gender = st.selectbox(translations[lang]["gender_label"], [translations[lang]["male"], translations[lang]["female"]], key="gender")
        gender_key = "male" if gender == translations[lang]["male"] else "female"
with col2:
    col_weight, col_height = st.columns(2)
    with col_weight:
        weight = st.number_input(translations[lang]["weight_label"], min_value=1.0, max_value=300.0, step=0.1, key="weight")
    with col_height:
        height_cm = st.number_input(translations[lang]["height_label"], min_value=30.0, max_value=300.0, step=0.1, key="height")

# Chuy·ªÉn ƒë·ªïi chi·ªÅu cao t·ª´ cm sang m
height_m = height_cm / 100

# N√∫t t√≠nh to√°n
if st.button(translations[lang]["calculate_button"]):
    if height_m > 0:
        bmi = calculate_bmi(weight, height_m)
        st.write(f"Chi·ªÅu cao: {height_cm} cm = {height_m:.2f} m")
        st.write(translations[lang]["bmi_result"].format(bmi=bmi))

        # Ph√¢n lo·∫°i v√† l·ªùi khuy√™n
        if age <= 17:
            category, advice = classify_bmi_children(bmi, age, gender_key, lang)
            if category == "Kh√¥ng c√≥ d·ªØ li·ªáu":
                st.warning(translations[lang]["no_data"])
            else:
                st.write(translations[lang]["category_label"].format(age=age, gender=gender, category=category))
                st.write(translations[lang]["advice_label"].format(advice=advice))
                st.write(translations[lang]["child_note"])
        else:
            category, advice = classify_bmi_adult(bmi, lang)
            st.write(translations[lang]["adult_category_label"].format(category=category))
            st.write(translations[lang]["advice_label"].format(advice=advice))

        # V·∫Ω bi·ªÉu ƒë·ªì
        st.write(f"### {translations[lang]['chart_title']}")
        plot_bmi_chart(bmi, age, gender_key, lang)
    else:
        st.error(translations[lang]["height_error"])

st.write("---")
st.write("·ª®ng d·ª•ng n√†y cung c·∫•p k·∫øt qu·∫£ tham kh·∫£o. H√£y h·ªèi b√°c sƒ© ƒë·ªÉ bi·∫øt th√™m nha!" if lang == "vi" else "This app provides reference results. Ask a doctor for more details!")
